'use strict';

const helpers = require('../../helpers');

describe('identity', () => {
  let differ;
  beforeEach(() => {
    differ = helpers.getDiffer();
  });
  const connection = helpers.getConnection();
  it('should create table with identity column', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: true } },
    });

    expect(await differ.sync({ force: true })).toMatchObject({
      queries: [
        'drop table if exists "DifferSchema"."users" cascade;',
        'create table "DifferSchema"."users" ( "id" integer not null generated BY DEFAULT as identity );',
      ],
    });
  });

  it('should add the identity column', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: 'int' },
    });
    await differ.sync({ force: true });

    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: { max: 9999 } } },
    });

    expect(await differ.sync()).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" set not null;',
        'alter table "DifferSchema"."users" alter column "id" add generated BY DEFAULT as identity ( maxvalue 9999 );',
      ],
    });
  });

  it('should change the identity column', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: {
        id: { type: 'int', identity: { start: 0, min: 0, max: 100 } },
      },
    });
    await differ.sync({ force: true });

    differ.define('table', {
      name: 'DifferSchema.users',
      columns: {
        id: {
          type: 'int',
          identity: { generation: 'ALWAYS', start: 100, min: 0, max: 9999 },
        },
      },
    });

    expect(await differ.sync()).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" set generated ALWAYS set maxvalue 9999 set start 100;',
      ],
    });
    expect(await differ.sync({ execute: false })).toMatchObject({
      queries: [],
    });
  });

  it('should remove identity attribute of column', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: true } },
    });
    await differ.sync({ force: true });

    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: false } },
    });

    expect(await differ.sync()).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" drop identity;',
        'alter table "DifferSchema"."users" alter column "id" drop not null;',
      ],
    });
    expect(await differ.sync({ execute: false })).toMatchObject({
      queries: [],
    });
  });

  it('should change identity range with reset', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: true } },
    });
    await differ.sync({ force: true });

    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: { start: 999, min: 999 } } },
    });

    expect(await differ.sync()).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" set minvalue 999 set start 999 restart with 999;',
      ],
    });
    expect(await differ.sync({ execute: false })).toMatchObject({
      queries: [],
    });
  });

  it('should adjust identity sequences', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int' } },
    });
    await differ.sync({ force: true, adjustIdentitySequences: true });

    await connection.client.query(
      `insert into "DifferSchema"."users" (id) values(50)`
    );
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: true } },
    });

    expect(await differ.sync({ adjustIdentitySequences: true })).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" set not null;',
        'alter table "DifferSchema"."users" alter column "id" add generated BY DEFAULT as identity;',
        'alter table "DifferSchema"."users" alter column "id" restart with 51;',
      ],
    });

    await connection.client.query(
      `insert into "DifferSchema"."users" (id) values(100)`
    );

    expect(await differ.sync({ adjustIdentitySequences: true })).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" restart with 101;',
      ],
    });
    expect(
      await differ.sync({ adjustIdentitySequences: true, execute: false })
    ).toMatchObject({ queries: [] });
  });

  it('should delete old serial column sequence when adding a identity option', async function () {
    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'serial', nullable: false } },
    });
    await differ.sync({ force: true });

    differ.define('table', {
      name: 'DifferSchema.users',
      columns: { id: { type: 'int', identity: true } },
    });

    expect(await differ.sync()).toMatchObject({
      queries: [
        'alter table "DifferSchema"."users" alter column "id" drop default;',
        'drop sequence if exists "DifferSchema"."users_id_seq";',
        'alter table "DifferSchema"."users" alter column "id" add generated BY DEFAULT as identity;',
      ],
    });
    expect(
      await differ.sync({ adjustIdentitySequences: true, execute: false })
    ).toMatchObject({ queries: [] });
  });
});
